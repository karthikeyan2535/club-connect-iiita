
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://saillvmcvrsnprjfffyh.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNhaWxsdm1jdnJzbnByamZmZnloIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDMwOTg0ODgsImV4cCI6MjA1ODY3NDQ4OH0.P9f_1VDwy9UBsMsmdOyH_XEBzYb2Ts19AyNTGZ1Yu2s";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

/**
 * Creates a user profile in the profiles table
 * 
 * @param {string} userId - The user's ID from auth.users
 * @param {string} email - The user's email address
 * @param {string} fullName - The user's full name
 * @param {string} userType - The user's role (student, organizer, admin)
 * @returns {Promise<{data: any, error: any}>} - Supabase response
 */
export const createUserProfile = async (
  userId: string,
  email: string,
  fullName: string,
  userType: string
) => {
  console.log(`Creating profile for user: ${userId} (${fullName}) as ${userType}`);
  
  // Check if profile already exists to prevent duplicates
  const { data: existingProfile, error: checkError } = await supabase
    .from('profiles')
    .select('id')
    .eq('id', userId)
    .single();
    
  if (checkError && checkError.code !== 'PGRST116') {
    console.error('Error checking for existing profile:', checkError);
    return { data: null, error: checkError };
  }
  
  // Don't create duplicate profiles
  if (existingProfile) {
    console.log('Profile already exists for user:', userId);
    return { data: existingProfile, error: null };
  }
  
  // Insert new profile
  return await supabase
    .from('profiles')
    .insert([
      {
        id: userId,
        full_name: fullName,
        user_type: userType,
      }
    ]);
};
